@article{badia_fempar:_2017,
abstract = {FEMPAR is an open source object oriented Fortran200X scientific software library for the high-performance scalable simulation of complex multiphysics problems governed by partial differential equations at large scales, by exploiting state-of-the-art supercomputing resources. It is a highly modularized, flexible, and extensible library, that provides a set of modules that can be combined to carry out the different steps of the simulation pipeline. FEMPAR includes a rich set of algorithms for the discretization step, namely (arbitrary-order) grad, div, and curl-conforming finite element methods, discontinuous Galerkin methods, B-splines, and unfitted finite element techniques on cut cells, combined with {\$}h{\$}-adaptivity. The linear solver module relies on state-of-the-art bulk-asynchronous implementations of multilevel domain decomposition solvers for the different discretization alternatives and block-preconditioning techniques for multiphysics problems. FEMPAR is a framework that provides users with out-of-the-box state-of-the-art discretization techniques and highly scalable solvers for the simulation of complex applications, hiding the dramatic complexity of the underlying algorithms. But it is also a framework for researchers that want to experience with new algorithms and solvers, by providing a highly extensible framework. In this work, the first one in a series of articles about FEMPAR, we provide a detailed introduction to the software abstractions used in the discretization module and the related geometrical module. We also provide some ingredients about the assembly of linear systems arising from finite element discretizations, but the software design of complex scalable multilevel solvers is postponed to a subsequent work.},
archivePrefix = {arXiv},
arxivId = {1708.01773},
author = {Badia, Santiago and Mart{\'{i}}n, Alberto F. and Principe, Javier},
doi = {10.1007/s11831-017-9244-1},
file = {:home/santiago/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Badia, Mart{\'{i}}n, Principe - 2018 - FEMPAR An Object-Oriented Parallel Finite Element Framework.pdf:pdf},
issn = {18861784},
journal = {Archives of Computational Methods in Engineering},
keywords = {Q1},
mendeley-tags = {Q1},
month = {oct},
number = {2},
pages = {195--271},
shorttitle = {FEMPAR},
title = {{FEMPAR: An Object-Oriented Parallel Finite Element Framework}},
volume = {25},
year = {2018}
}
@article{frondelius2017juliafem,
  title={Julia{FEM} - open source solver for both industrial and academia usage},
  volume={50}, 
  url={https://rakenteidenmekaniikka.journal.fi/article/view/64224},
  DOI={10.23998/rm.64224},
  number={3},
  journal={Rakenteiden Mekaniikka},
  author={Frondelius, Tero and Aho, Jukka},
  year={2017},
  pages={229-233}
}
@article{Innes2018,
author = {Innes, Mike},
doi = {10.21105/joss.00602},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Innes - 2018 - Flux Elegant machine learning with Julia.pdf:pdf},
issn = {2475-9066},
journal = {Journal of Open Source Software},
month = {may},
number = {25},
pages = {602},
publisher = {The Open Journal},
title = {{Flux: Elegant machine learning with Julia}},
url = {http://joss.theoj.org/papers/10.21105/joss.00602},
volume = {3},
year = {2018}
}
@article{Dunning2017,
abstract = {JuMP is an open-source modeling language that allows users to express a wide range of optimization problems (linear, mixed-integer, quadratic, conic-quadratic, semidefinite, and nonlinear) in a high-level, algebraic syntax. JuMP takes advantage of advanced features of the Julia programming language to offer unique functionality while achieving performance on par with commercial modeling tools for standard tasks. In this work we will provide benchmarks, present the novel aspects of the implementation, and discuss how JuMP can be extended to new problem classes and composed with state-of-The-Art tools for visualization and interactivity.},
archivePrefix = {arXiv},
arxivId = {1508.01982},
author = {Dunning, Iain and Huchette, Joey and Lubin, Miles},
doi = {10.1137/15M1020575},
eprint = {1508.01982},
issn = {00361445},
journal = {SIAM Review},
keywords = {Algebraic modeling languages,Automatic differentiation,Scientific computing},
month = {may},
number = {2},
pages = {295--320},
publisher = {Society for Industrial and Applied Mathematics Publications},
title = {{JuMP: A modeling language for mathematical optimization}},
volume = {59},
year = {2017}
}
@article{Carlsson_NLsolve_2019,
author = {Carlsson, Kristoffer and Mogensen, Patrick Kofod and Villemot, S{\'{e}}bastien and Lyon, Spencer and Gomez, Matthieu and Rackauckas, Christopher and Holy, Tim and Kelman, Tony and Widmann, David and Macedo, Miguel Raz Guzm{\'{a}}n and Et al.},
doi = {10.5281/zenodo.3357100},
journal = {Zenodo},
month = {jul},
publisher = {Zenodo},
title = {{JuliaNLSolvers/NLsolve.jl: v4.1.0}},
year = {2019}
}
@misc{flux_web,
howpublished = {https://fluxml.ai/},
title = {{The Flux Project's Webpage}},
url = {https://fluxml.ai/},
urldate = {2019-08-25}
}
@article{Bezanson2017,
abstract = {Bridging cultures that have often been distant, Julia combines expertise from the diverse fields of computer science and computational science to create a new approach to numerical computing. Julia is designed to be easy and fast. Julia questions notions generally held as "laws of nature" by practitioners of numerical computing: 1. High-level dynamic programs have to be slow. 2. One must prototype in one language and then rewrite in another language for speed or deployment, and 3. There are parts of a system for the programmer, and other parts best left untouched as they are built by the experts. We introduce the Julia programming language and its design --- a dance between specialization and abstraction. Specialization allows for custom treatment. Multiple dispatch, a technique from computer science, picks the right algorithm for the right circumstance. Abstraction, what good computation is really about, recognizes what remains the same after differences are stripped away. Abstractions in mathematics are captured as code through another technique from computer science, generic programming. Julia shows that one can have machine performance without sacrificing human convenience.},
author = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
doi = {10.1137/141000671},
issn = {00361445},
journal = {SIAM Review},
keywords = {Julia,Numerical,Parallel,Scientific computing},
number = {1},
pages = {65--98},
publisher = {Society for Industrial and Applied Mathematics Publications},
title = {{Julia: A fresh approach to numerical computing}},
volume = {59},
year = {2017}
}
@article{Bangerth2007,
abstract = {An overview of the software design and data abstraction decisions chosen for deal.II, a general purpose finite element library written in C++, is given. The library uses advanced object-oriented and data encapsulation techniques to break finite element implementations into smaller blocks that can be arranged to fit users requirements. Through this approach, deal.II supports a large number of different applications covering a wide range of scientific areas, programming methodologies, and application-specific algorithms, without imposing a rigid framework into which they have to fit. A judicious use of programming techniques allows us to avoid the computational costs frequently associated with abstract object-oriented class libraries. The paper presents a detailed description of the abstractions chosen for defining geometric information of meshes and the handling of degrees of freedom associated with finite element spaces, as well as of linear algebra, input/output capabilities and of interfaces to other software, such as visualization tools. Finally, some results obtained with applications built atop deal.II are shown to demonstrate the powerful capabilities of this toolbox. {\textcopyright} 2007 ACM.},
author = {Bangerth, W. and Hartmann, R. and Kanschat, G.},
doi = {10.1145/1268776.1268779},
isbn = {0098-3500},
issn = {00983500},
journal = {ACM Transactions on Mathematical Software},
keywords = {Object-orientation,Software design},
month = {aug},
number = {4},
publisher = {ACM},
title = {{Deal.II --A general-purpose object-oriented finite element library}},
url = {http://portal.acm.org/citation.cfm?doid=1268776.1268779},
volume = {33},
year = {2007}
}
@misc{jump_web,
howpublished = {https://github.com/JuliaOpt/JuMP.jl},
title = {{The JuMP Project's Webpage}},
url = {https://github.com/JuliaOpt/JuMP.jl},
urldate = {2019-09-25}
}
@misc{Carlsson,
author = {Carlsson, Kristoffer},
title = {{JuaFEM git repository}},
url = {https://github.com/KristofferC/JuAFEM.jl}
}
@misc{Krysl,
author = {Krysl, Petr},
title = {{FinEtools git repository}},
url = {https://github.com/PetrKryslUCSD/FinEtools.jl}
}
@book{Johnson2009,
author = {Johnson, Claes},
isbn = {048646900X},
pages = {288},
publisher = {Dover Publications},
title = {{Numerical Solution of Partial Differential Equations by the Finite Element Method}},
year = {2009}
}
@article{Langtangen2016,
abstract = {This book offers a concise and gentle introduction to finite element programming in Python based on the popular FEniCS software library. Using a series of examples, including the Poisson equation, the equations of linear elasticity, the incompressible Navier-Stokes equations, and systems of nonlinear advection-diffusion-reaction equations, it guides readers through the essential steps to quickly solving a PDE in FEniCS, such as how to define a finite variational problem, how to set boundary conditions, how to solve linear and nonlinear systems, and how to visualize solutions and structure finite element Python programs. This book is open access under a CC BY license. 1 Preliminaries -- 2 Fundamentals: Solving the Poisson Equation -- 3 A Gallery of Finite Element Solvers -- 4 Subdomains and Boundary Conditions -- 5 Extensions: Improving the Poisson Solver -- References.},
author = {Langtangen, Hans Petter and Logg, Anders},
doi = {10.1007/978-3-319-52462-7},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Petter Langtangen, Logg - 2017 - Solving PDEs in Python-The FEniCS Tutorial Volume I.pdf:pdf},
isbn = {3319524615},
journal = {Manual},
title = {{Solving PDEs in Minutes - The FEniCS Tutorial Volume I}},
volume = {I},
year = {2016}
}
@article{Ølgaard2010,
abstract = {We examine aspects of the computation of finite element matrices and vectors that are made possible by automated code generation. Given a variational form in a syntax that resembles standard mathematical notation, the low-level computer code for building finite element tensors, typically matrices, vectors and scalars, can be generated automatically via a form compiler. In particular, the generation of code for computing finite element matrices using a quadrature approach is addressed. For quadrature representations, a number of optimization strategies which are made possible by automated code generation are presented. The relative performance of two different automatically generated representations of finite element matrices is examined, with a particular emphasis on complicated variational forms. It is shown that approaches which perform best for simple forms are not tractable for more complicated problems in terms of run-time performance, the time required to generate the code or the size of the generated code. The approach and optimizations elaborated here are effective for a range of variational forms. {\textcopyright} 2010 ACM.},
author = {{\O}lgaard, Kristian B and Wells, Garth N.},
doi = {10.1145/1644001.1644009},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/{\O}lgaard - 2010 - Optimizations for Quadrature Representations of Finite Element Tensors through Automated Code Generation.pdf:pdf},
issn = {00983500},
journal = {ACM Transactions on Mathematical Software},
keywords = {Code generation,Finite element method},
number = {1},
title = {{Optimizations for quadrature representations of finite element tensors through automated code generation}},
url = {http://doi.acm.org/10.1145/1644001.1644009},
volume = {37},
year = {2010}
}
@article{Kirby2006,
abstract = {As a key step towards a complete automation of the finite element method, we present a new algorithm for automatic and efficient evaluation of multilinear variational forms. The algorithm has been implemented in the form of a compiler, the FEniCS Form Compiler (FFC). We present benchmark results for a series of standard variational forms, including the incompressible Navier-Stokes equations and linear elasticity. The speedup compared to the standard quadrature-based approach is impressive; in some cases the speedup is as large as a factor of 1000. {\textcopyright} 2006 ACM.},
archivePrefix = {arXiv},
arxivId = {1112.0402},
author = {Kirby, Robert C and Logg, Anders},
doi = {10.1145/1163641.1163644},
eprint = {1112.0402},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kirby - Unknown - A Compiler for Variational Forms.pdf:pdf},
issn = {00983500},
journal = {ACM Transactions on Mathematical Software},
keywords = {Automation,Compiler,Finite element,Variational form},
number = {3},
pages = {417--444},
title = {{A compiler for variational forms}},
volume = {32},
year = {2006}
}
@article{Rathgeber2016,
abstract = {Firedrake is a new tool for automating the numerical solution of partial differential equations. Firedrake adopts the domain-specific language for the finite element method of the FEniCS project, but with a pure Python runtime-only implementation centered on the composition of several existing and new abstractions for particular aspects of scientific computing. The result is a more complete separation of concerns that eases the incorporation of separate contributions from computer scientists, numerical analysts, and application specialists. These contributions may add functionality or improve performance. Firedrake benefits from automatically applying new optimizations. This includes factorizing mixed function spaces, transforming and vectorizing inner loops, and intrinsically supporting block matrix operations. Importantly, Firedrake presents a simple public API for escaping the UFL abstraction. This allows users to implement common operations that fall outside of pure variational formulations, such as flux limiters.},
author = {Rathgeber, Florian and Ham, David A and Mitchell, Lawrence and Lange, Michael and Luporini, Fabio and Mcrae, Andrew T T and Bercea, Gheorghe-Teodor and Markall, Graham R and Kelly, Paul H J and Ham, ; D A and Kelly, ; P H J},
doi = {10.1145/2998441},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rathgeber et al. - 2016 - Firedrake Automating the finite element method by composing abstractions.pdf:pdf},
journal = {ACM Transactions on Mathematical Software},
keywords = {Algorithms,G18 [Numerical Analysis]: Partial Differential Equ,Performance Additional Key Words and Phrases: Abst,UFL,code generation},
number = {3},
pages = {24},
title = {{Firedrake: Automating the finite element method by composing abstractions}},
url = {http://dx.doi.org/10.1145/2998441},
volume = {43},
year = {2016}
}
@article{Badia2020,
abstract = {This work is a user guide to the FEMPAR scientific software library. FEMPAR is an open-source object-oriented framework for the simulation of partial differential equations (PDEs) using finite element methods on distributed-memory platforms. It provides a rich set of tools for numerical discretization and built-in scalable solvers for the resulting linear systems of equations. An application expert that wants to simulate a PDE-governed problem has to extend the framework with a description of the weak form of the PDE at hand (and additional perturbation terms for non-conforming approximations). We show how to use the library by going through three different tutorials. The first tutorial simulates a linear PDE (Poisson equation) in a serial environment for a structured mesh using both continuous and discontinuous Galerkin finite element methods. The second tutorial extends it with adaptive mesh refinement on octree meshes. The third tutorial is a distributed-memory version of the previous one that combines a scalable octree handler and a scalable domain decomposition solver. The exposition is restricted to linear PDEs and simple geometries to keep it concise. The interested user can dive into more tutorials available in the FEMPAR public repository to learn about further capabilities of the library, e.g., nonlinear PDEs and nonlinear solvers, time integration, multi-field PDEs, block preconditioning, or unstructured mesh handling. Program summary: Program Title: FEMPAR Program Files doi: http://dx.doi.org/10.17632/dtx487wp57.1 Licensing provisions: GNU General Public License 3 Programming language: MPI, Fortran2003/2008 (Object-Oriented Programming features) Nature of problem: Computational simulation of a broad range of large-scale application problems governed by Partial Differential Equations Solution method: Arbitrary-order grad-, curl-, and div-conforming finite elements on n-cube and n-simplex meshes. Continuous and Discontinuous Galerkin FEM. Adaptive Mesh Refinement and Coarsening via forests-of-octrees. Diagonally Implicit Runge–Kutta time integrators. Newton–Raphson linearization. Block preconditioning for multiphysics applications. Multilevel Balancing Domain Decomposition by Constraints preconditioning. Krylov subspace iterative solvers. Sparse direct solvers. Additional comments: Program Github repository https://github.com/fempar/fempar Program website http://www.fempar.org},
archivePrefix = {arXiv},
arxivId = {1908.00891},
author = {Badia, Santiago and Mart{\'{i}}n, Alberto F.},
doi = {10.1016/j.cpc.2019.107059},
eprint = {1908.00891},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Badia, Mart{\'{i}}n - 2020 - A tutorial-driven introduction to the parallel finite element library FEMPAR v1.0.0.pdf:pdf},
issn = {00104655},
journal = {Computer Physics Communications},
keywords = {Finite elements,Mathematical software,Object-Oriented Programming,Partial Differential Equations},
month = {mar},
pages = {107059},
publisher = {Elsevier B.V.},
title = {{A tutorial-driven introduction to the parallel finite element library FEMPAR v1.0.0}},
volume = {248},
year = {2020}
}
@article{Badia2018,
abstract = {FEMPAR is an open source object oriented Fortran200X scientific software library for the high-performance scalable simulation of complex multiphysics problems governed by partial differential equations at large scales, by exploiting state-of-the-art supercomputing resources. It is a highly modularized, flexible, and extensible library, that provides a set of modules that can be combined to carry out the different steps of the simulation pipeline. FEMPAR includes a rich set of algorithms for the discretization step, namely (arbitrary-order) grad, div, and curl-conforming finite element methods, discontinuous Galerkin methods, B-splines, and unfitted finite element techniques on cut cells, combined with h-adaptivity. The linear solver module relies on state-of-the-art bulk-asynchronous implementations of multilevel domain decomposition solvers for the different discretization alternatives and block-preconditioning techniques for multiphysics problems. FEMPAR is a framework that provides users with out-of-the-box state-of-the-art discretization techniques and highly scalable solvers for the simulation of complex applications, hiding the dramatic complexity of the underlying algorithms. But it is also a framework for researchers that want to experience with new algorithms and solvers, by providing a highly extensible framework. In this work, the first one in a series of articles about FEMPAR, we provide a detailed introduction to the software abstractions used in the discretization module and the related geometrical module. We also provide some ingredients about the assembly of linear systems arising from finite element discretizations, but the software design of complex scalable multilevel solvers is postponed to a subsequent work.},
archivePrefix = {arXiv},
arxivId = {1708.01773},
author = {Badia, Santiago and Mart{\'{i}}n, Alberto F. and Principe, Javier},
doi = {10.1007/s11831-017-9244-1},
eprint = {1708.01773},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Badia, Mart{\'{i}}n, Principe - 2018 - FEMPAR An Object-Oriented Parallel Finite Element Framework(2).pdf:pdf},
issn = {18861784},
journal = {Archives of Computational Methods in Engineering},
keywords = {Mathematical and Computational Engineering},
month = {apr},
number = {2},
pages = {195--271},
publisher = {Springer Netherlands},
title = {{FEMPAR: An Object-Oriented Parallel Finite Element Framework}},
volume = {25},
year = {2018}
}
@article{Verdugo2019,
abstract = {We present Gridap, a new scientific software library for the numerical approximation of partial differential equations (PDEs) using grid-based approximations. Gridap is an open-source software project exclusively written in the Julia programming language. The main motivation behind the development of this library is to provide an easy-to-use framework for the development of complex PDE solvers in a dynamically typed style without sacrificing the performance of statically typed languages. This work is a tutorial-driven user guide to the library. It covers some popular linear and nonlinear PDE systems for scalar and vector fields, single and multi-field problems, conforming and nonconforming finite element discretizations, on structured and unstructured meshes of simplices and hexahedra.},
archivePrefix = {arXiv},
arxivId = {1910.01412},
author = {Verdugo, Francesc and Badia, Santiago},
eprint = {1910.01412},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Verdugo, Badia - 2019 - A user-guide to Gridap -- grid-based approximation of partial differential equations in Julia.pdf:pdf},
month = {oct},
title = {{A user-guide to Gridap -- grid-based approximation of partial differential equations in Julia}},
url = {http://arxiv.org/abs/1910.01412},
year = {2019}
}
@article{Rackauckas2017,
abstract = {DifferentialEquations.jl is a package for solving differential equations in Julia. It covers discrete equations (function maps, discrete stochastic (Gillespie/Markov) simulations), ordinary differential equations, stochastic differential equations, algebraic differential equations, delay differential equations, hybrid differential equations, jump diffusions, and (stochastic) partial differential equations. Through extensive use of multiple dispatch, metaprogramming, plot recipes, foreign function interfaces (FFI), and call-overloading, DifferentialEquations.jl offers a unified user interface to solve and analyze various forms of differential equations while not sacrificing features or performance. Many modern features are integrated into the solvers, such as allowing arbitrary user-defined number systems for high-precision and arithmetic with physical units, built-in multithreading and parallelism, and symbolic calculation of Jacobians. Integrated into the package is an algorithm testing and benchmarking suite to both ensure accuracy and serve as an easy way for researchers to develop and distribute their own methods. Together, these features build a highly extendable suite which is feature-rich and highly performant.},
author = {Rackauckas, Christopher and Nie, Qing},
doi = {10.5334/jors.151},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rackauckas, Nie - 2017 - DifferentialEquations.jl – A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Juli.pdf:pdf},
issn = {2049-9647},
journal = {Journal of Open Research Software},
keywords = {Julia,high-precision,metaprogramming,multiple dispatch,multithreading,ordinary differential equations,partial differential equations,stochastic differential equations},
month = {may},
number = {1},
publisher = {Ubiquity Press, Ltd.},
title = {{DifferentialEquations.jl – A Performant and Feature-Rich Ecosystem for Solving Differential Equations in Julia}},
url = {http://openresearchsoftware.metajnl.com/articles/10.5334/jors.151/},
volume = {5},
year = {2017}
}
@article{Carlsson2019,
abstract = {Tensors.jl is a Julia package that provides efficient computations with symmetric and non-symmetric tensors. The focus is on the kind of tensors commonly used in e.g. continuum mechanics and fluid dynamics. Exploiting Julia's ability to overload Unicode infix operators and using Unicode in identifiers, implemented tensor expressions commonly look very similar to their mathematical writing. This possibly reduces the number of bugs in implementations. Operations on tensors are often compiled into the minimum assembly instructions required, and, when beneficial, SIMD-instructions are used. Computations involving symmetric tensors take symmetry into account to reduce computational cost. Automatic differentiation is supported, which means that most functions written in pure Julia can be efficiently differentiated without having to implement the derivative by hand. The package is useful in applications where efficient tensor operations are required, e.g. in the Finite Element Method.},
author = {Carlsson, Kristoffer and Ekre, Fredrik},
doi = {10.5334/jors.182},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Carlsson, Ekre - 2019 - Tensors.jl — Tensor Computations in Julia.pdf:pdf},
issn = {20499647},
journal = {Journal of Open Research Software},
keywords = {Constitutive modeling,Continuum mechanics,Finite element method,Fluid dynamics,Tensors},
month = {mar},
number = {1},
publisher = {Ubiquity Press},
title = {{Tensors.jl- tensor computations in Julia}},
url = {http://openresearchsoftware.metajnl.com/articles/10.5334/jors.182/},
volume = {7},
year = {2019}
}
@article{Logg2010,
abstract = {We describe here a library aimed at automating the solution of partial differential equations using the finite element method. By employing novel techniques for automated code generation, the library combines a high level of expressiveness with efficient computation. Finite element variational forms may be expressed in near mathematical notation, from which low-level code is automatically generated, compiled, and seamlessly integrated with efficient implementations of computational meshes and high-performance linear algebra. Easy-to-use object-oriented interfaces to the library are provided in the form of a C++ library and a Python module. This article discusses the mathematical abstractions and methods used in the design of the library and its implementation. A number of examples are presented to demonstrate the use of the library in application code. {\textcopyright} 2010 ACM.},
archivePrefix = {arXiv},
arxivId = {1103.6248},
author = {Logg, Anders and Wells, Garth N},
doi = {10.1145/1731022.1731030},
eprint = {1103.6248},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Logg, Wells - 2010 - DOLFIN Automated finite element computing.pdf:pdf},
issn = {00983500},
journal = {ACM Transactions on Mathematical Software},
keywords = {Code generation,DOLFIN,FEniCS project,Form compiler},
number = {2},
title = {{DOLFIN: Automated finite element computing}},
url = {http://doi.acm.org/10.1145/1731022.1731030},
volume = {37},
year = {2010}
}
@article{Alnaes2015,
abstract = {The FEniCS Project is a collaborative project for the development of innovative concepts and tools for automated scientific computing, with a particular focus on the solution of differential equations by finite element methods. The FEniCS Projects software consists of a collection of interoperable software components, including DOLFIN, FFC, FIAT, Instant, UFC, UFL, and mshr. This note describes the new features and changes introduced in the release of FEniCS version 1.5.},
author = {Aln{\ae}s, Martin and Blechta, Jan and Hake, Johan and Johansson, August and Kehlet, Benjamin and Logg, Anders and Richardson, Chris and Ring, Johannes and Rognes, Marie E and Wells, Garth N},
doi = {10.11588/ans.2015.100.20553},
file = {:home/fverdugo/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Aln{\ae}s et al. - 2015 - The FEniCS Project Version 1.5.pdf:pdf},
issn = {2197-8263},
journal = {The FEniCS Project Version 1.5},
keywords = {Component-based software engineering,Computer science,Differential equation,Finite element method,Interoperability,Software,Software engineering},
month = {dec},
number = {100},
pages = {9--23},
title = {{The FEniCS Project Version 1.5}},
url = {https://journals.ub.uni-heidelberg.de/index.php/ans/article/view/20553},
volume = {3},
year = {2015}
}
